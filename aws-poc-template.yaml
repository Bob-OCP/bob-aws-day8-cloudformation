AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: ""
Resources:
    EC2NetworkInterface:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "Interface for NAT Gateway ${EC2NatGateway}"
            SubnetId: !Ref EC2SubnetPublicA
            SourceDestCheck: false

    EC2EIP:
        Type: "AWS::EC2::EIP"
        Properties:
            Domain: "vpc"

    EC2InternetGateway:
        Type: "AWS::EC2::InternetGateway"
        Tags: 
          - 
            Key: "Name"
            Value: "POC_VPC"

    ElasticLoadBalancingV2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/index.php"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: "Webservers-ASG"
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "load_balancing.algorithm.anomaly_mitigation"
                Value: "off"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""

    EC2BackendSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "POC-Private-Backend"
            GroupName: "POC-Private-Backend"
            Tags: 
              - 
                Key: "Name"
                Value: "Backend Servers"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                SourceSecurityGroupId: !Ref EC2JumpboxSecurityGroup
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                Description: "SSH - Jumpbox / Webservers"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
              - 
                SourceSecurityGroupId: !Ref EC2JumpboxSecurityGroup
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                Description: "Ping Request"
                FromPort: 8
                IpProtocol: "icmp"
                ToPort: -1
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2JumpboxSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Allows jumping to Private Subnet boxes from outside"
            GroupName: "Jumpbox"
            Tags: 
              - 
                Key: "Name"
                Value: "Jumpbox"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                Description: "SSH"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
              - 
                CidrIp: "0.0.0.0/0"
                Description: "ICMP All"
                FromPort: -1
                IpProtocol: "icmp"
                ToPort: -1
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2JumpboxInstance:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: "ami-034c0515002a44f05"
            InstanceType: "t2.micro"
            KeyName: "POC_Key"
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            Tenancy: "default"
            SubnetId: !Ref EC2SubnetPublicA
            EbsOptimized: false
            SecurityGroupIds: 
              - !Ref EC2JumpboxSecurityGroup
            SourceDestCheck: true
            BlockDeviceMappings: 
              - 
                DeviceName: "/dev/xvda"
                Ebs: 
                    Encrypted: false
                    VolumeSize: 8
                    VolumeType: "gp3"
                    DeleteOnTermination: true
            UserData: "IyEvYmluL2Jhc2gKc3VkbyBzeXN0ZW1jdGwgZGlzYWJsZSBodHRwZApzdWRvIHN5c3RlbWN0bCBzdG9wIGh0dHBk"
            Tags: 
              - 
                Key: "Name"
                Value: "Jumpbox"
            HibernationOptions: 
                Configured: false
            EnclaveOptions: 
                Enabled: false

                
    EC2BackendInstance:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: "ami-034c0515002a44f05"
            InstanceType: "t2.micro"
            KeyName: "POC_Key"
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            Tenancy: "default"
            SubnetId: !Ref EC2SubnetPrivateA
            EbsOptimized: false
            SecurityGroupIds: 
              - !Ref EC2BackendSecurityGroup
            SourceDestCheck: true
            BlockDeviceMappings: 
              - 
                DeviceName: "/dev/xvda"
                Ebs: 
                    Encrypted: false
                    VolumeSize: 8
                    VolumeType: "gp3"
                    DeleteOnTermination: true
            Tags: 
              - 
                Key: "Name"
                Value: "Backend"
            HibernationOptions: 
                Configured: false
            EnclaveOptions: 
                Enabled: false

    AutoScalingAutoScalingGroup:
        Type: "AWS::AutoScaling::AutoScalingGroup"
        Properties:
            AutoScalingGroupName: "ASG_POC"
            LaunchTemplate: 
                LaunchTemplateName: "POC_Apache"
                Version: "1"
            MinSize: 0
            MaxSize: 0
            DesiredCapacity: 0
            Cooldown: 300
            AvailabilityZones: 
              - !Select [ 0, !GetAZs '' ]
              - !Select [ 1, !GetAZs '' ]
            TargetGroupARNs: 
              - !Ref ElasticLoadBalancingV2TargetGroup
            HealthCheckType: "EBS,ELB"
            HealthCheckGracePeriod: 300
            VPCZoneIdentifier: 
              - !Ref EC2SubnetPublicA
              - !Ref EC2SubnetPublicB
            TerminationPolicies: 
              - "Default"
            ServiceLinkedRoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
            Tags: 
              - 
                Key: "Cost-Center"
                Value: "AWS-Lab"
                PropagateAtLaunch: true
              - 
                Key: "Environment"
                Value: "Sandbox"
                PropagateAtLaunch: true
              - 
                Key: "Name"
                Value: "ASG-Web-Servers"
                PropagateAtLaunch: true
              - 
                Key: "Owner"
                Value: "Bob"
                PropagateAtLaunch: true
              - 
                Key: "Project"
                Value: "AWS-POC"
                PropagateAtLaunch: true
            NewInstancesProtectedFromScaleIn: false

    AutoScalingScalingPolicy:
        Type: "AWS::AutoScaling::ScalingPolicy"
        Properties:
            AutoScalingGroupName: !Ref AutoScalingAutoScalingGroup
            PolicyType: "TargetTrackingScaling"
            EstimatedInstanceWarmup: 0
            TargetTrackingConfiguration:
                PredefinedMetricSpecification:
                    PredefinedMetricType: "ASGAverageCPUUtilization"
                TargetValue: 50.0
                DisableScaleIn: false

    EC2LaunchTemplate:
        Type: "AWS::EC2::LaunchTemplate"
        Properties:
            LaunchTemplateName: "POC_Apache"
            LaunchTemplateData: 
                KeyName: "POC_Key"
                NetworkInterfaces: 
                  - 
                    DeviceIndex: 0
                    Groups: 
                      - !Ref EC2WebserversSecurityGroup
                ImageId: "ami-034c0515002a44f05"
                InstanceType: "t2.micro"
                MetadataOptions: 
                    HttpTokens: "optional"

    EC2VPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "172.31.0.0/16"
            EnableDnsSupport: true
            EnableDnsHostnames: true
            InstanceTenancy: "default"
            Tags: 
              - 
                Key: "Name"
                Value: "POC_VPC"

    EC2VPCGatewayAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            InternetGatewayId: !Ref EC2InternetGateway
            VpcId: !Ref EC2VPC

    EC2WebserversSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Accesses needed for Webservers"
            GroupName: "Webservers"
            Tags: 
              - 
                Key: "Name"
                Value: "Webservers"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                Description: "Apache Test"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              - 
                CidrIp: "0.0.0.0/0"
                Description: "SSH"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
              - 
                CidrIp: "0.0.0.0/0"
                Description: "https"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              - 
                CidrIp: "0.0.0.0/0"
                Description: "Backend Ping Receive"
                FromPort: -1
                IpProtocol: "icmp"
                ToPort: -1
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"
                
                
    EC2SubnetPublicA:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: "172.31.80.0/20"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: true
            Tags:
                - Key: "Name"
                  Value: "Public-Subnet-A"

    EC2SubnetPublicB:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: "172.31.0.0/20"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: true
            Tags:
                - Key: "Name"
                  Value: "Public-Subnet-B"

    EC2SubnetPrivateA:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: "172.31.192.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags:
                - Key: "Name"
                  Value: "Private-Subnet-A"

    EC2NatGateway:
        Type: "AWS::EC2::NatGateway"
        Properties:
            SubnetId: !Ref EC2SubnetPublicA
            Tags: 
                - 
                    Key: "Name"
                    Value: "Backend-NAT"
            AllocationId: !GetAtt EC2EIP.AllocationId

    ElasticLoadBalancingV2LoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "ALB-POC"
            Scheme: "internet-facing"
            Type: "application"
            Subnets: 
              - !Ref EC2SubnetPublicA
              - !Ref EC2SubnetPublicB
            SecurityGroups: 
              - !Ref EC2WebserversSecurityGroup
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - 
                Key: "access_logs.s3.enabled"
                Value: "false"
              - 
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              - 
                Key: "deletion_protection.enabled"
                Value: "false"
              - 
                Key: "routing.http2.enabled"
                Value: "true"
              - 
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_client_port.enabled"
                Value: "false"
              - 
                Key: "routing.http.preserve_host_header.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_header_processing.mode"
                Value: "append"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "true"
              - 
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              - 
                Key: "client_keep_alive.seconds"
                Value: "3600"
              - 
                Key: "waf.fail_open.enabled"
                Value: "false"
              - 
                Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
                Value: "false"
              - 
                Key: "zonal_shift.config.enabled"
                Value: "false"
              - 
                Key: "connection_logs.s3.enabled"
                Value: "false"


    EC2RouteTablePublic:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags: 
              - 
                Key: "Name"
                Value: "Public"

    EC2RouteTablePrivate:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags: 
              - 
                Key: "Name"
                Value: "Private-Backend"

    EC2Route:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: !Ref EC2InternetGateway
            RouteTableId: !Ref EC2RouteTablePublic

    EC2Route2:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            NatGatewayId: !Ref EC2NatGateway
            RouteTableId: !Ref EC2RouteTablePrivate

    EC2SubnetRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTablePrivate
            SubnetId: !Ref EC2SubnetPrivateA

    ElasticLoadBalancingV2Listener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions: 
              - 
                Order: 1
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                Type: "forward"

    CloudFrontDistribution:
        Type: "AWS::CloudFront::Distribution"
        Properties:
            DistributionConfig: 
                Origins: 
                  - 
                    ConnectionAttempts: 3
                    ConnectionTimeout: 10
                    CustomOriginConfig: 
                        HTTPPort: 80
                        HTTPSPort: 443
                        OriginKeepaliveTimeout: 5
                        OriginProtocolPolicy: "http-only"
                        OriginReadTimeout: 30
                        OriginSSLProtocols: 
                          - "SSLv3"
                          - "TLSv1"
                          - "TLSv1.1"
                          - "TLSv1.2"
                    DomainName: !GetAtt ElasticLoadBalancingV2LoadBalancer.DNSName
                    Id: "POC-ALB-Origin"
                    OriginPath: ""
                DefaultCacheBehavior: 
                    AllowedMethods: 
                      - "HEAD"
                      - "GET"
                      - "OPTIONS"
                    CachedMethods: 
                      - "HEAD"
                      - "GET"
                    Compress: true
                    CachePolicyId: "83da9c7e-98b4-4e11-a168-04f0df8e2c65"
                    OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3"
                    SmoothStreaming: false
                    TargetOriginId: "POC-ALB-Origin"
                    ViewerProtocolPolicy: "allow-all"
                CacheBehaviors: 
                  - 
                    AllowedMethods: 
                      - "HEAD"
                      - "GET"
                    Compress: false
                    CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
                    OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3"
                    PathPattern: "/*.js"
                    SmoothStreaming: false
                    TargetOriginId: !Sub "POC-ALB-Origin"
                    ViewerProtocolPolicy: "allow-all"
                  - 
                    AllowedMethods: 
                      - "HEAD"
                      - "GET"
                    Compress: false
                    CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
                    OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3"
                    PathPattern: "/*.jpg"
                    SmoothStreaming: false
                    TargetOriginId: !Sub "POC-ALB-Origin"
                    ViewerProtocolPolicy: "allow-all"
                  - 
                    AllowedMethods: 
                      - "HEAD"
                      - "GET"
                    Compress: false
                    CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
                    OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3"
                    PathPattern: "/*.jpeg"
                    SmoothStreaming: false
                    TargetOriginId: !Sub "POC-ALB-Origin"
                    ViewerProtocolPolicy: "allow-all"
                  - 
                    AllowedMethods: 
                      - "HEAD"
                      - "GET"
                    Compress: false
                    CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
                    OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3"
                    PathPattern: "/*.gif"
                    SmoothStreaming: false
                    TargetOriginId: !Sub "POC-ALB-Origin"
                    ViewerProtocolPolicy: "allow-all"
                  - 
                    AllowedMethods: 
                      - "HEAD"
                      - "GET"
                    Compress: false
                    CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
                    OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3"
                    PathPattern: "/*.css"
                    SmoothStreaming: false
                    TargetOriginId: !Sub "POC-ALB-Origin"
                    ViewerProtocolPolicy: "allow-all"
                  - 
                    AllowedMethods: 
                      - "HEAD"
                      - "GET"
                    Compress: false
                    CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
                    OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3"
                    PathPattern: "/*.png"
                    SmoothStreaming: false
                    TargetOriginId: !Sub "POC-ALB-Origin"
                    ViewerProtocolPolicy: "allow-all"
                Comment: ""
                PriceClass: "PriceClass_All"
                Enabled: true
                ViewerCertificate: 
                    CloudFrontDefaultCertificate: true
                Restrictions: 
                    GeoRestriction: 
                        RestrictionType: "blacklist"
                        Locations: 
                          - "CN"
                HttpVersion: "http2and3"
                DefaultRootObject: ""
                IPV6Enabled: true
                    
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                - Type: forward
                  TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
            Conditions:
                - Field: path-pattern
                  Values:
                      - "/*"
            ListenerArn: !Ref ElasticLoadBalancingV2Listener
            Priority: 1
            
    EC2SubnetRouteTableAssociationPublicA:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTablePublic
            SubnetId: !Ref EC2SubnetPublicA

    EC2SubnetRouteTableAssociationPublicB:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTablePublic
            SubnetId: !Ref EC2SubnetPublicB


Outputs:
    ENIPrimaryPrivateIP:
        Description: Primary Private IP of the NAT Gateway Network Interface
        Value: !GetAtt EC2NetworkInterface.PrimaryPrivateIpAddress
        Export:
            Name: ENIPrimaryPrivateIP
            
    ALBDNSName:
        Description: DNS Name of ALB-POC
        Value: !GetAtt ElasticLoadBalancingV2LoadBalancer.DNSName
        Export:
            Name: ALBDNSName
            
    CloudFrontPubDomainName:
        Description: Public Domain Name of CloudFront 
        Value: bobssandbox.com
        Export:
            Name: CloudFrontPubDomainName

    NATElasticIP:
        Description: Public IP of NAT
        Value: !GetAtt EC2EIP.PublicIp
        Export:
            Name: NATElasticIP
